import sys
from PyQt5.QtWidgets import (
    QApplication,
    QWidget,
    QLabel,
    QPushButton,
    QVBoxLayout,
)
from mfi20 import *  # Импортируем класс MFI20 из другого файла
class Welcome(QWidget):
    def __init__(self):
        super().__init__()
        self.setFixedSize(940, 980)
        self.setWindowTitle("Множество")

        self.label = QLabel(
"Класс set (множество) — это одна из ключевых структур данных в Python.\n\n"
"   Она представляет собой неупорядоченную коллекцию уникальных элементов. "
"Класс set, в некоторой степени, соответствует математическому множеству. "
"Многие широко используемые математические операции, применимые к множествам, существуют и в Python. "
"Часто вычисления, производимые над множествами, оказываются гораздо быстрее, чем альтернативные операции со списками. \n\n"
"   Создать объект set в Python можно двумя путями: \n\n"
"1.    Использовать фигурные скобки {} \n\n"
"2.    Использовать встроенную функцию set() \n\n"
"   Множество создается при размещении всех элементов внутри фигурных скобок {}, как показано на примере ниже. \n\n"
"s1 = {}  # Это создаст пустое множество \n\n"
"s2 = {1, 'pythonru', 20.67} \n\n"
"   Еще один способ создать (или определить) множество Python — использовать функцию set(). Пример ниже. \n\n"
"s1 = set()  # Это создаст пустое множество "
"s2 = set({1, 'pythonru', 20.67}) \n\n"
"Нет ограничений на количество элементов в объекте set, но запрещено добавлять элементы изменяемых типов, такие как список или словарь. "
"Если попробовать добавить список (с набором элементов), интерпретатор выдаст ошибку. \n\n"
"Добавление элементов в множества Python \n\n"
"Объекты set в Python поддерживают добавление элементов двумя путями: по одному с помощью метода add() или группами с помощью update(). Оба описаны дальше. \n\n"
"Один элемент можно добавить с помощью метода add(). Такой код выглядит следующим образом: \n\n"
"set1 = {1, 3, 4} "
"set1.add(2) "
"print(set1) "
"{1, 2, 3, 4} \n\n"
"Добавление нескольких элементов в множество Python \n\n"
"Больше одного элемента можно добавить с помощью update(). Код следующий:\n\n "
"set2 = {1, 2, 3} "
"set2.update([4, 5, 6]) "
"print(set2)  #  {1, 2, 3, 4, 5, 6} "
"Удаление элементов из множеств Python \n\n"
"Один или несколько элементов можно удалить из объекта set с помощью следующих методов. Их отличие в виде возвращаемого значения. \n\n"
"   remove()\n\n "
"   discard()\n\n "
"   pop()\n\n "
"   remove()\n\n "
"Метод remove() полезен в тех случаях, когда нужно удалить из множества конкретный элемент и вернуть ошибку в том случае, если его нет в объекте. "
"Следующий код показывает метод remove() в действии. \n\n"
"set1 = {1, 2, 3, 4, 'a', 'p'} "
"set1.remove(2) "
"print(set1)"
"{1, 3, 4, 'a', 'p'} "
"set1.remove(5) # Error element not found "
"discard() \n\n"
"Метод discard() полезен, потому что он удаляет конкретный элемент и не возвращает ошибку, если тот не был найден во множестве. \n\n"
"set1 = {1, 3, 4, 'a', 'p'} "
"set1.discard('a') "
"print(set1)\n\n "
"# {1, 3, 4 'p'} "
"set1.discard(6) "
"print(set1) "
"# {1, 3, 4, 'p'} \n\n"
"pop() \n\n"
"Метод pop() удаляет по одному элементу за раз в случайном порядке. "
"Set — это неупорядоченная коллекция, поэтому pop() не требует аргументов (индексов в этом случае). "
"Метод pop() можно воспринимать как неконтролируемый способ удаления элементов по одному из множеств в Python. \n\n"
"set1 = {1, 3, 4, “p”} "
"set1.pop() # случайный элемент будет удален (ваш результат может отличаться)\n\n"
"Методы множеств Python "
"У объектов set есть несколько встроенных методов. Увидеть их все можно с помощью команды dir(). dir(object) в Python показывает самые важные атрибуты разных типов объектов "
"Вот что выдаст функция для объекта set в Python.\n\n"
"set1 = { 1, 2, 3, 4} "
"dir(set1) "
"['__and__', '__class__', '__contains__', '__delattr")
        self.label.setWordWrap(True)

        self.start_button = QPushButton("Начать тест")
        self.start_button.clicked.connect(self.open_test_form)

        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.start_button)
        self.setLayout(layout)

    def open_test_form(self):
        # Импортируйте файл с основным тесто
        self.test_form = MFI20()
        self.test_form.show()
        self.close()
if __name__ == "__main__":
    app = QApplication(sys.argv)
    welcome = Welcome()
    welcome.show()
    sys.exit(app.exec_())